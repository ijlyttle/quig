#!/bin/bash

quarto_directory="/opt/quarto/"
regex_version="[0-9]+\.[0-9]+\.[0-9]+"
quarto_shim="/usr/local/bin/quarto"

function quig_resolve()
{
    # check dependencies
    # ref: https://stackoverflow.com/a/33297935
    type curl >/dev/null 2>&1 || { echo >&2 "ERROR: curl required but it's not installed. Aborting."; exit 1; }
    type jq >/dev/null 2>&1 || { echo >&2 "ERROR: jq required but it's not installed. Aborting."; exit 1; }

    # set default
    local default="release"
    if [ -n "$QUARTO_VERSION" ]; then
        local default="$QUARTO_VERSION"
    fi

    # parse argument
    local arg="$default"
    if [ -n "$1" ]; then
        local arg=$1
    fi

    # resolve version
    local version=$arg
    if [ $arg == "release" ]; then
        local version=$(curl -s https://quarto.org/docs/download/_download.json | jq -r .version)
    elif [ $arg == "pre_release" ]; then
        local version=$(curl -s https://quarto.org/docs/download/_prerelease.json | jq -r .version)
    fi

    # validate version
    if [[ ! $version =~ ^$regex_version$ ]]; then
        echo >&2 "ERROR: Version must be 'release', 'pre_release' or formatted like '1.2.3'. You provided: '$version'." 
        exit 1
    fi

    # return version
    echo "$version"
}

function quig_list()
{
    echo "not done yet"
}

function quig_default_get()
{
    if ! [ -f $quarto_shim ]; then
      echo "ERROR: Cannot find quarto installation at $quarto_shim"
      exit 1
    fi

    local rpath=$(realpath $quarto_shim) 
        
    if ! local version=$(echo $rpath | sed -E "s/^\/opt\/quarto\/($regex_version)\/bin\/quarto$/\1/"); then
        echo "nothing"
        exit 1
    fi

    echo $version
    exit 0
}

function quig_default_set()
{

    local version="$1"
    local quarto_target="/opt/quarto/$version/bin/quarto"

    # make sure target installation exists
    if [ ! -f "$quarto_target" ]; then 
        echo "Quarto installation not found at $quarto_target"
        exit 1
    fi

    # link shim to target
    ln -sf $quarto_target $quarto_shim

    exit 0
}

function quig_default() {

    # if arg provided, set
    if [ -n "$1" ]; then
        if ! version=$(quig_default_set $1); then
            echo $version 
            exit 1
        fi
    fi

    # get default, return
    if ! local version=$(quig_default_get); then
        echo $version 
        exit 1
    fi
    
    echo $version
    exit 0
}


function quig_add()
{
    
    if ! local version=$(quig_resolve $1); then
        exit 1
    fi

    echo "$version"
}

function quig_rm()
{
    echo "not done yet"
}

function quig_help()
{
    echo "not done yet"
}

if [[ "$1" == "resolve" ]]; then

    if ! version=$(quig_add $2); then
        exit 1
    fi

    echo "$version"
    exit 0    
fi

if [[ "$1" == "add" ]]; then

    if ! version=$(quig_add $2); then
        exit 1
    fi
    
    echo "$version"    
    exit 0    
fi

if [[ "$1" == "default" ]]; then

    if ! version=$(quig_default $2); then
        echo "$version"     
        exit 1
    fi
    
    echo "$version"    
    exit 0   
fi
